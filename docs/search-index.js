var searchIndex = JSON.parse('{\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","i":[[14,"cfg_if","cfg_if","The main macro provided by this crate. See crate …",null,null]],"p":[]},\
"qemu_exit":{"doc":"Exit QEMU with user-defined code.","i":[[0,"riscv64","qemu_exit","RISCV64.",null,null],[3,"RISCV64","qemu_exit::riscv64","RISCV64 configuration",null,null],[11,"new","","Create an instance.",0,[[]]],[8,"QEMUExit","qemu_exit","Generic interface for exiting QEMU.",null,null],[10,"exit","","Exit with specified return code.",1,[[]]],[10,"exit_success","","Exit QEMU using <code>EXIT_SUCCESS</code>, aka <code>0</code>, if possible.",1,[[]]],[10,"exit_failure","","Exit QEMU using <code>EXIT_FAILURE</code>, aka <code>1</code>.",1,[[]]],[11,"from","qemu_exit::riscv64","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"exit","","Exit qemu with specified exit code.",0,[[]]],[11,"exit_success","","",0,[[]]],[11,"exit_failure","","",0,[[]]]],"p":[[3,"RISCV64"],[8,"QEMUExit"]]},\
"strail":{"doc":"","i":[[0,"consts","strail","",null,null],[7,"HEAP_START","strail::consts","",null,null],[7,"HEAP_SIZE","","",null,null],[7,"TEXT_START","","",null,null],[7,"TEXT_END","","",null,null],[7,"RODATA_START","","",null,null],[7,"RODATA_END","","",null,null],[7,"DATA_START","","",null,null],[7,"DATA_END","","",null,null],[7,"BSS_START","","",null,null],[7,"BSS_END","","",null,null],[7,"STACK_START","","",null,null],[7,"STACK_END","","",null,null],[0,"asm","strail","",null,null],[0,"macros","","",null,null],[0,"mmio","","",null,null],[5,"mmio_write","strail::mmio","Writes <code>value</code> to memory memory-mapped I/O at <code>address</code> in …",null,[[]]],[5,"mmio_read","","Reads a value from memory memory-mapped I/O at <code>address</code> in …",null,[[]]],[0,"uart","strail","",null,null],[3,"Uart","strail::uart","",null,null],[12,"uart_put_func","","",0,null],[11,"new","","Creates a new <code>Uart</code> with <code>base_address</code>",0,[[]]],[11,"init","","Initializes the <code>Uart</code> device",0,[[]]],[11,"put","","Writes a character to <code>Uart</code>",0,[[]]],[0,"arch","strail","",null,null],[0,"isa","strail::arch","",null,null],[0,"asm","strail::arch::isa","",null,null],[0,"encoding","","",null,null],[4,"CSRegister","strail::arch::isa::encoding","",null,null],[13,"Mstatus","","",1,null],[13,"Mie","","",1,null],[17,"MIP_MSIP","","Machine Software interrupt",null,null],[17,"MSTATUS_MIE","","Machine interrupt enable bit",null,null],[4,"Interrupt","","",null,null],[13,"UserSoftware","","",2,null],[13,"SupervisorSoftware","","",2,null],[13,"MachineSoftware","","",2,null],[13,"UserTimer","","",2,null],[13,"SupervisorTimer","","",2,null],[13,"MachineTimer","","",2,null],[13,"UserExternal","","",2,null],[13,"SupervisorExternal","","",2,null],[13,"MachineExternal","","",2,null],[11,"from_usize","","",2,[[],["interrupt",4]]],[4,"Exception","","",null,null],[13,"InstructionAddrMisaligned","","",3,null],[13,"InstructionAccessFault","","",3,null],[13,"IllegaInstruction","","",3,null],[13,"LoadAddrMisaligned","","",3,null],[13,"LoadAccessFault","","",3,null],[13,"StoreAMOAddrMisaligned","","",3,null],[13,"StoreAMOAccessFault","","",3,null],[13,"EnvCallFromUMode","","",3,null],[13,"EnvCallFromSMode","","",3,null],[13,"EnvCallFromMMode","","",3,null],[13,"InstructionPageFault","","",3,null],[13,"LoadPageFault","","",3,null],[13,"StoreAMOPageFault","","",3,null],[11,"from_usize","","",3,[[],["exception",4]]],[17,"CAUSE_MASK","","Check if trap is an exception or interrupt trap If [31] = …",null,null],[0,"page","strail::arch::isa","",null,null],[17,"PAGE_SIZE","strail::arch::isa::page","A single page is is 4,096 bytes",null,null],[5,"align_val","","Align value to order",null,[[]]],[5,"init","","Initialize RISC-V related components",null,[[]]],[5,"page_count","","Get number of total allocated pages",null,[[]]],[5,"get_last_page","","Get address of the last page",null,[[]]],[5,"alloc","","Allocate N pages in RISC-V",null,[[]]],[5,"dealloc","","Dellocates a page in RISC-V",null,[[]]],[5,"zalloc","","Zero allocate a page in RISC-V",null,[[]]],[5,"print_page_allocation","","Print the currente page allocation status",null,[[]]],[4,"PageEntryBits","","RISC-V Sv39 Page entry bits representation",null,null],[13,"Dirty","","",4,null],[13,"Access","","",4,null],[13,"Global","","",4,null],[13,"User","","",4,null],[13,"Execute","","",4,null],[13,"Write","","",4,null],[13,"Read","","",4,null],[13,"Valid","","",4,null],[13,"ReadWrite","","",4,null],[13,"ReadExecute","","",4,null],[11,"val","","",4,[[]]],[3,"Entry","","",null,null],[12,"entry","","",5,null],[11,"is_valid","","Check if entry is valid",5,[[]]],[11,"is_invalid","","Check if entry is invalid",5,[[]]],[11,"is_leaf","","Check if entry is leaf",5,[[]]],[11,"is_branch","","Check if entry is a branch entry",5,[[]]],[11,"set_entry","","Set aa entry",5,[[]]],[11,"get_entry","","Get the entry",5,[[]]],[3,"Table","","",null,null],[12,"entries","","",6,null],[5,"map","","",null,[[["table",3]]]],[5,"unmap","","",null,[[["table",3]]]],[5,"virt_to_phys","","",null,[[["table",3]],["option",4]]],[5,"ident_map_range","","Identity map a range of address",null,[[["table",3]]]],[0,"trap","strail::arch::isa","",null,null],[3,"TrapFrame","strail::arch::isa::trap","<code>TrapFrame</code> from a trap",null,null],[12,"regs","","",7,null],[5,"trap_handler","","Handles the trap and calls <code>TrapFrame.handle</code> architecture …",null,[[["trapframe",3]]]],[0,"mem","strail::arch","",null,null],[5,"print_page_allocation","strail::arch::mem","",null,[[]]],[5,"init","","",null,[[]]],[5,"zalloc","","",null,[[]]],[5,"alloc","","",null,[[]]],[5,"dealloc","","",null,[[]]],[5,"page_count","","",null,[[]]],[5,"last_page","","",null,[[]]],[0,"kmem","strail::arch","",null,null],[5,"get_head","strail::arch::kmem","",null,[[]]],[5,"get_num_allocations","","",null,[[]]],[5,"init","","",null,[[]]],[5,"kzmalloc","","",null,[[]]],[5,"kmalloc","","",null,[[]]],[5,"abort","strail","Abort by waiting for interrupt",null,[[]]],[8,"Testable","","Trait for running test functions",null,null],[10,"run","","Runs the test function",8,[[]]],[5,"exit_qemu_as_failure","","Exit Qemu with a failed rc",null,[[]]],[5,"exit_qemu_as_success","","Exit Qemu with a success rc",null,[[]]],[5,"test_runner","","The test runner for all tests",null,[[]]],[14,"dbg","","Prints message, filename, and line number to stantard …",null,null],[14,"debug","","",null,null],[14,"trace","","Prints message and file information to standard output.",null,null],[14,"dbgf","","",null,null],[14,"print","","Prints to the standard output",null,null],[14,"println","","Prints to the standard output appending a new line",null,null],[11,"from","strail::uart","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","strail::arch::isa::encoding","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"into","","",3,[[]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","strail::arch::isa::page","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","strail::arch::isa::trap","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"into","","",7,[[]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"fmt","strail::uart","",0,[[["formatter",3]],["result",6]]],[11,"fmt","strail::arch::isa::encoding","",2,[[["formatter",3]],["result",6]]],[11,"fmt","strail::arch::isa::trap","",7,[[["formatter",3]],["result",6]]],[11,"eq","strail::arch::isa::encoding","",2,[[["interrupt",4]]]],[11,"write_str","strail::uart","",0,[[],[["result",4],["error",3]]]],[11,"clone","","",0,[[],["uart",3]]],[11,"clone","strail::arch::isa::trap","",7,[[],["trapframe",3]]]],"p":[[3,"Uart"],[4,"CSRegister"],[4,"Interrupt"],[4,"Exception"],[4,"PageEntryBits"],[3,"Entry"],[3,"Table"],[3,"TrapFrame"],[8,"Testable"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);